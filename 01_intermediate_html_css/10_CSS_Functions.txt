
### CSS Functions ###

## What is a function and how are they used in CSS? ##

    Functions in CSS are reusable pieces of code which perform a specific task,
    similar to programming languages.

    Functions are passed as "arguments" between brackets.

    Common examples:

        color: rgb(0, 42, 255);
        background: linear-gradient(90deg, blue, red);

    Above the value of color is the function; rgb(), which accepts arguments in the form of
    numbers.

    It processes the numbers to calculate the RGB color.

    Similarly, the background property has a value of linear-gradient(90deg, blue, red).

    linear-gradient generates a gradient image use the parameters it's been given.
    It needs at least two color arguments: colours to transition between.
    You can also set the angle of direction of the gradient line like in the example above,
    and add more colour values.

    Unlike programming languages in The Odin Project, CSS does not allow us to create our
    own functions. Instead, the language comes bundles with a list of premade functions
    that help solve the most common styling problems.

    Here are some more useful functions in CSS:

    calc()

        The most powerful use cases include:

        mixing units

        the ability to nest calc( calc () - calc () )

        example:

            :root {
            --header: 3rem;
            --footer: 40px;
            --main: calc(100vh - calc(var(--header) + var(--footer)));
            }

    
        --header, --footer, and --main are all examples of CSS variables.
        You will be learning about these in the next lesson.

        Setting main to equal the outcome of: 100vh - (3rem + 40px). To put it another way:
        main = 100vh - (header + footer). calc() is handling the math for us even though we
        are mixing vh, rem and px units. Combined with CSS variables, calc() can save us
        from the headache of repeating CSS rules.

    min()

        min() does an excellent job of helping us create responsive websites.

        #iconHolder {
            width: min(150px, 100%);
            height: min(150px, 100%);
            box-sizing: border-box;
            border: 6px solid blue;
        }

        If there are 150px available to the image, it will take up all 150px.
        If there are not 150px available, the image will switch to 100% of the parent's width.

        In the first case min() selects 150px, since 150px is smaller (the minimum) between 150px
        and 100% of the parent's width; in th esecond, it chooses 100%, min() behaves as a
        boundry for the maximum allowed value, which in this example is 150px.

        You are able to do basic maths inside a min() => for example:
        width: min(80ch, 100vw - 2rem);

    max()

        Max works the same way as min but in reverse.

        It selects the largest possible value from within the brackets. You can think of max()
        as ensuring a minimum allowed value for a property.

        Example:

            width: max(100px, 4em, 50%);

        From this list of given sizes, max() will select the largest one. As long as 4em or 50%
        result in lengths longer than 100px, max() will select (the bigger) one of them.

        If they are smaller than 100px (maybe as a cause of user's font size preferences, or
        their browser's window size or zoom level), then 100px will win out as the largest.
        You can think of 100px in this example as a guard value: width here won't ever be set
        to less than 100px.

    clamp()

        A great way to make elements fluid and responsive. Clamp() takes 3 values:

            h1 {
                font-size: clamp(320px, 80vw, 60rem);
            }

    
