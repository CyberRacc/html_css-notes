
### Form Validation ###

    Validations allow us to set specific constraints or rules that determine what data users can
    enter into an input. When a user enters data that breaks the rules, a message will appear,
    providing feedback on what was wrong with the entered data and how to fix it.

    Validations are vital for well-designed forms.

    They protect the backend from recieve incorrect data, and make it simpler for users.

## Required validation ##

    To make a field required, just add the required attribute to it:

        <form action="#" method="get">
        <div>
            <label for="user_email">*Email:</label>
            <input type="email" id="user_email" name="user_email" required>
        </div>
        <br>

        <div>
            <label for="user_password">*Password:</label>
            <input type="password" id="user_password" name="user_password" required>
        </div>

        <button type="submit">Login</button>
        </form>

    We should always indicate which fields are required. This is often done by adding
    an asterisk to the required field label like we have done in the above example.

## Text length validations ##

    Sometimes we need users to enter a minimum or maximum amount of text into a field.
    Real-world examples of using these validations would be the old 140 character limit that
    Twitter had.

    # Minimum length validation #

        Use the minlength attribute with an integer value:

            <form action="#" method="get">
                <div>
                    <textarea placeholder="What's happening?" minlength="3"></textarea>
                </div>
                
                <button type="submit">Tweet</button>
            </form>

    # Maximum length validation #

        Use the maxlength attribute with an integer value:

            <form action="#" method="get">
                <div>
                    <textarea placeholder="What's happening?" maxlength="20"></textarea>
                </div>

                <button type="submit">Tweet</button>
            </form>

    # Combining validations #

        We can use both of the above together to have a min and max length.

## Number range validations ##

    You might need to control the range of values that users can enter into number based
    form controls.

    Use the min and max attributes.

    These attributes will only work on number-based form controls such as the number,
    dates and time inputs.

    Some real-world use cases for using these validations would be limiting the quantity on
    a product order form or choosing the number of passengers on a flight booking
    form.

    # Min validation #

    Use the min attribute with an integer value:

        <form action="#" method="get">
            <div>
                <label for="quantity">Quantity</label>
            </div>
            <input type="number" id="quantity" name="quantity" min="1" value="0">
            
            <div>
                <button type="submit">Place Order</button>
            </div>
        </form>

    # Max validation #

        Use the max attribute with an integer value:

            <form action="#" method="get">
                <div>
                    <label for="passengers">Passengers</label>
                </div>
                <input type="number" id="passengers" name="passengers" max="5" value="0">
                
                <div>
                    <button type="submit">Book</button>
                </div>
            </form>

## Pattern Validations ##

    To ensure we get the correct information from users, we will often want to ensure
    data matches a particular pattern. Real-world applications would be checking if a
    credit card number or a postcode is in the correct format.

    To add a pattern validation, we give the form control a pattern attribute with
    a regular expression as the value. In our example we are using the pattern validation
    to ensure a US zip code is the correct format (5 numbers followed by an optional dash
    and 4 more numbers):

        <form action="#" method="get">
            <div>
                <label for="zip_code">Postal / Zip Code:</label>
            </div>

            <input type="text" id="zip_code" name="zip_code" pattern="(\d{5}([\-]\d{4})?)" required>

            <div>
                <button type="submit">Submit</button>
            </div>
        </form>

    Entering an incorrect zip code and submitting the form will display the following
    validation error in the browser: "Please match the requested format".
    This isn't very useful since it doesn't communicate how to fix the issue.

    It is good practice to use a placeholder attribute to show users an example of
    the expected pattern they need to enter:

        <form action="#" method="get">
            <div>
                <label for="zip_code">Postal / Zip Code:</label>
            </div>

            <input type="text" id="zip_code" name="zip_code" pattern="(\d{5}([\-]\d{4})?)" title="Please enter a valid zip code, example: 65251" placeholder="65251" required>
            
            <div>
                <button type="submit">Submit</button>
            </div>
        </form>

    The pattern attribute can only be used on <input> elements. Some input elements already
    validate data that matches a certain pattern. For example, the email input field will
    make sure a valid email is entered and the url input element will check to ensure the URL
    starts with http or https:

        <form action="#" method="get">
            <div>
                <label for="email">Email:</label>
            </div>
            <input type="email" id="email" name="email">

            <div>
                <label for="website">Website:</label>
            </div>
            <input type="url" id="website" name="website">

            <div>
                <button type="submit">Submit</button>
            </div>
        </form>

## Styling validations ##

    We can target form controls that have passed or failed validations using the :valid
    and :invalid pseudo-classes.

    Example:

    HTML:

        <form action="#" method="get">
            <div>
                <label for="email">Email</label>
            </div>
            <input type="email" id="email" name="email">

            <div>
                <label for="website">Website</label>
            </div>
            <input type="url" id="website" name="website">

            <div>
                <button type="submit">Submit</button>
            </div>
        </form>

    CSS:

        input {
            border: 2px solid #000;
            margin-bottom: 15px;
            padding: 5px;
            border-radius: 5px;
        }

        input:invalid {
            border-color: red;
        }

        input:valid {
            border-color: green;
        }

    First, we target any valid inputs and give them a green border. Our email and URL inputs
    initially have a green border since they are not required fields and are valid.

    When a field is invalid, we give it a red border instead.

## Conclusion ##

    Sometimes you need to have a validation that aren't possible with the built-in validations.
    For example, validating that a password input and password confirmation input have the same
    value or validating that a username has not already been taken.

    For these cases we will need to get creative and make custom validations using JavaScript
    and CSS.

    Client-side validations are not enough for ensuring users enter the correct data.
    We also want to chec the integrity of any user data coming into the backend, and have
    server-side validations in place.
