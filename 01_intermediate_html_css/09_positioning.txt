
## Positioning ##

# Syntax #

position: static;
position: relative;
position: absolute;
position: fixed;
position: sticky;

/* Global values */
position: inherit;
position: initial;
position: revert;
position: revert-layer;
position: unset;


# Static and relative positioning #

    The default positioning mode is position: static;

    The difference between static and relative is simple,

    Static is the default position of every element, and properties top, right, left and bottom
    do not affect the position of the element.

    Relative on the otherhand is pretty much the same as static, but properties top, right, etc
    displace the element relative to its normal position in the flow of the document.

# Absolute Positioning #

    position: absolute;

    This allows you to position something at an exact point on the screen without disturbing
    the other elements around it.

    Using absolute positioning on an element will remove that element from the normal
    document flow whilst being positioned relative to an ancestor element.

    In simple terms: elements that are removed from the normal flow of the document
    don't affect other elements and are also not affected by other elements.

    Using absolute positioning allows you to position elements anywhere on the screen using top, right,
    bottom and left properties.

    This property is really useful when you want to position something at an exact point onthe screen, without
    disturbing any of the other elements.

    Good use cases for absolute positioning are:

        modals

        image with a caption on it

        icons on top of other elements

    Using absolute positioning has very specific use cases and if possible, using flexbox or grid should
    be prioritised. Absolute positioning shouldn't be used to do entire page layouts.

# Fixed Positioning #

    Fixed elements are also removef from the normal flow of the document.

    They are positioned relative to the viewport.

    You use top, right, left and bottom properties to position it and it will stay there as the user scrolls.

    This is especially usefil for navigation bars and floating chat buttons.

# Sticky positioning #

    Sticky elements will act like normal elements until you scroll past them, then they start behaving like fixed elements.
    
    They are not taken out of the normal flow of the document.

    It is useful for things like section headings.

    This is how you can see what category you're looking at while scrolling through a shop.

    # Performance & Accessibility #

        Scrolling elements containing fixed or sticky content can cause performance and accessibility issues.
        As a user scrolls, the browser must repaint the sticky or fixed content in a new location. Depending on the
        content needing to be repainted, the browser performance, and the device's processing speed, the browser may
        not be able to manage repaints at 60 fps, causing accessibility concerns for people with sensitivities and
        jank for everyone. One solution is to add will-change: transform to the positioned elements to render the
        element in its own layer, improving repaint speed and therefore improving performance and accessibility.
