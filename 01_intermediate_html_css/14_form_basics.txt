
### Form Basics ###

    Forms are one of the most critical parts of your site. They are your user's
    gateway into your backend - the user provides data in a form, and you do stuff with it.

    You need to specify the proper types of inputs for each possible data item since there
    are often multiple ways to collect a piece of data, but only one way is easiest for
    your user.

## The form element ##

    The form element is a container element like the div element.
    The form element wraps all of the inputs a user will interact with on a form.

    The form element accepts two essential attributes, action, which takes a URL value
    that tells the form where it should send its data to be processed.
    
    The second is the method attribute which tells the browser tells the browser which
    HTTP request method it should use to sumbit the form. The GET and POST request
    methods are the two you will find yourself using the most.

    We use GET when we want to retrieve something from a server. For example, Google uses
    a GET request when you search as it gets the search results.

    POST is used when we want to change something on the server, for example, when a
    user makes an account or makes a payment on a website.

    The markup for creating a form element looks like this:

        <form action="example.com/path" method="post">

        </form>

## Form controls ##

    To start collecting user data, we need to use form control elements. These are all the
    elements users will interact with on the form, such as text boxes, dropdowns, checkboxes
    and buttons.

## The input element ##

    The input element is the most versatile.

    It accepts a type attribute which tells the browser what type of data it should expect and
    how to render the input element.

    A text input looks like this:

        <form action="example.com/path" method="post">
            <input type="text">
        </form>

    Text inputs accept any text input. You would use this to collect things like first names
    and last names.

## Labels ##

    An input on it's own isn't very useful as the user will not know what kind of data
    they are supposed to provide.

    Instead, we can give our inputs a label to inform users what type of data they are
    expected to enter.

    To create a label, we use the <label> element. The text we want displayed in the label will
    go between its opening and closing tags:

        <form action="example.com/path" method="post">
            <label for="first_name">First Name:</label>
            <input type="text" id="first_name">
        </form>

    Labels accept a for attribute, which associates it with a particular input. The input
    we want to associate with a label needs an id attribute with the same value as the label's
    for attribute.

    When a label is associated with an input and is clicked, it will focus the cursor on that
    input, ready for the user to input some data. This helps make our forms more
    accessible to users who rely on assistive tech.

## Placeholder attribute ##

    To guide users on what to enter in the form elements, we use placeholder text.

    By using the placeholder attribute to an input, the value of the placeholder
    atrribute is the text we want to display in the input:

        <label for="first_name">First Name:</label>
        <input type="text" id="first_name" placeholder="Bob...">

    Use placeholder text to demonstrate how text should be entered and formatted.

## The name attribute ##

    We need to use labels so that users understand what the data entered into an input field
    will represent. Just like that, we also need to let the backend (where we send our data)
    know what each piece of data represents.

    We do this by adding a name attribute:

        <label for="first_name">First Name:</label>
        <input type="text" id="first_name" name="first_name">

    The name attribute serves as a reference to the data inputted into a form control after
    submitting it. It's like a variable name for the input.

    Form input should always have a name attribute, otherwise it will be ignored
    when the form is submitted.

    To get a better understanding of what this looks like we can submit a form to httpbin.
    This service will send back a response which will let us view what data was submitted.
    Fill in the form below and click submit:

    <form action="https://httpbin.org/post" method="post">
        <div>
            <label for="first_name">First Name:</label>
            <input type="text" name="first_name" id="first_name">
        </div>

        <div>
            <label for="last_name">Last Name:</label>
            <input type="text" name="last_name" id="last_name">
        </div>

        <div>
            <label for="age">Age:</label>
            <input type="number" name="age" id="age">
        </div>

        <button type="submit">Submit</button>
    </form>

    The output we care about from the response is the form object,
    which will look a bit like this:

    "form": {
        "age": "33",
        "first_name": "John",
        "last_name": "Doe"
    },

## Using form controls outside of forms ##

    You can also use any of the form controls HTML provides outside of the
    <form> element, even when you don't have a backend server where you can send data.

    For example you might want to have an input that gets some data from a user
    and display that somewhere else on the page with JavaScript.

## The type attribute ##

    Email inputs are specialised text inputs just for email addresses. They are different
    from text inputs in that they will display a different keyboard which will include
    the @ symbol on mobile devices to make entering email addresses easier.

    They also validate that the user has entered a correctly formatted email address, but
    there will be more on validations later.

    To create an email input, we use an input element with type attribute of "email":

        <label for="user_email">Email Address:</label>
        <input type="email" id="user_email" name="email" placeholder="you@example.com">

    Password inputs are another specialised text input.

    They mask the inputted data with another character, usually an asterisk or bullet point.
    This is to hude the password from anyone who may be looking as it's being entered.

    A password input can be created using an input element with a type of "password":

        <label for="user_password">Password:</label>
        <input type="password" id="user_password" name="password">

    The number input only accepts number values and ignores any other characters the user
    tries to enter.

    Use the type attribute of "number":

        <label for="amount">Amount:</label>
        <input type="number" id="amount" name="amount">

    To collect dates from a user, we can use a date input. This input is unique because
    it provides a better user experience for choosing dates by rendering a simple date
    picker calendar.

    To create a date input, we use the input element with a type attribute of "date":

        <label for="dob">Date of Birth:</label>
        <input type="date" id="dob" name="dob">

## Text Area ##

    Whilst not technically an input element, the text area element provides an input box
    that can accept text that spans multiple lines like user comments and reviews.
    It can also be resized by clicking and dragging the bottom right corner to make it bigger
    or smaller.

    To create a tet area, we use the <textarea> element.

        <textarea></textarea>

    Unlike input elements, textarea elements have a closing tag. This allows you to wrap
    some initial content you want the text area to display:

        <textarea>Some initial content</textarea>

    Text area elements accept a couple of unique attributes that other form controls do not.
    These are the rows and cols attributes. They allow you to control the initial height (rows)
    and width (cols) of the text area:

        <textarea rows="20" cols="60"></textarea>



## Selection elements ##

    Sometimes you want users to select a value from a predefined list. This is where select
    elements will be useful.

## Select dropdown ##

    The select element renders a dropdown list.

    They have similar markup to unordered lists.

    To create a select dropdown, use the <select> element, and any options within the select
    elements are defined using <option> elements:

        <select name="Car">
            <option value="vauxhall">Vauxhall</option>
            <option value="tesla">Tesla</option>
            <option value="fiat">Fiat</option>
            <option value="bmw">BMW</option>
            <option value="mini">Mini</option>
            <option value="ford">Ford</option>
        </select>

    All the option elements should have a value attribute. This value will be sent to the
    server when the form is submitted. If not added, the text content will be used.

    You can set one of the options to be the default one that's selected when the browser
    first renders the form. You do this by adding the selected attribute to one of the
    options.

        <option value="tesla" selected>Tesla</option>

    You can also split the list of options into groups using the <optgroup> element.

    It takes a label attribute which the browser uses as the label for each group:

        <select name="fashion">
        <optgroup label="Clothing">
            <option value="t_shirt">T-Shirts</option>
            <option value="sweater">Sweaters</option>
            <option value="coats">Coats</option>
        </optgroup>
        <optgroup label="Foot Wear">
            <option value="sneakers">Sneakers</option>
            <option value="boots">Boots</option>
            <option value="sandals">Sandals</option>
        </optgroup>
        </select>

## Radio buttons ##

    Select dropdowns are good for saving space when you have a huge list of options.

    But if we have a smaller list of 5 or less options, a better user experience is to
    have them displayed on the page instead of hidden behind a dropdown.

    For this we use radio buttons. They allow us to create multiple options that the user
    can choose one of. To create a radio button, we use the input element with the type
    of "radio":

        <h1>Ticket Type</h1>
        <div>
            <input type="radio" id="child" name="ticket_type" value="child">
            <label for="child">Child</label>
        </div>

        <div>
            <input type="radio" id="adult" name="ticket_type" value="adult">
            <label for="adult">Adult</label>
        </div>

        <div>
            <input type="radio" id="senior" name="ticket_type" value="senior">
            <label for="senior">Senior</label>
        </div>

    When we select one of the radio buttons, and then select another, it will
    deselect the first one. Radio buttons know to do this because they have the same
    name attribute.

    We can set the default selected radio button by adding the checked attribute to it:

        <h1>Ticket Type</h1>
        <div>
            <input type="radio" id="child" name="ticket_type" value="child">
            <label for="child">Child</label>
        </div>

        <div>
            <input type="radio" id="adult" name="ticket_type" value="adult" checked>
            <label for="adult">Adult</label>
        </div>

        <div>
            <input type="radio" id="senior" name="ticket_type" value="senior">
            <label for="senior">Senior</label>
        </div>

## Checkboxes ##

    Checkboxes are similar to radio buttons in that they allow users to choose from a set
    of prefixed options. But unlike radio buttons, they allow multiple options to be
    selected at once.

    To create a checkbox, use the input element with a type attribute of "checkbox":

        <h1>Pizza Toppings</h1>

        <div>
            <input type="checkbox" id="sausage" name="topping" value="sausage">
            <label for="sausage">Sausage</label>
        </div>

        <div>
            <input type="checkbox" id="onions" name="topping" value="onions">
            <label for="onions">Onions</label>
        </div>

        <div>
            <input type="checkbox" id="pepperoni" name="topping" value="pepperoni">
            <label for="pepperoni">Pepperoni</label>
        </div>

        <div>
            <input type="checkbox" id="mushrooms" name="topping" value="mushrooms">
            <label for="mushrooms">Mushrooms</label>
        </div>

    We can also have a single checkbox when we want users to toggle if they want
    something to be true or false. Like signing up to a newsletter when they create an
    account for example:

        <div>
            <input type="checkbox" id="newsletter" name="news_letter">
            <label for="newsletter">Send me the news letter</label>
        </div>

    We can set checkboxes to be checked by default on page load by giving them a checked
    attribute:
    
        <div>
            <input type="checkbox" id="newsletter" name="news_letter" checked>
            <label for="newsletter">Send me the news letter</label>
        </div>

## Buttons ##

    Button elements accept a type attribute that tells the browser what kind of button it
    is. There are three types of buttons:

    1. Submit buttons

        For when a user has finished a form and wants to submit it. The type attribute
        has a value of "submit" by default if the type is not specified or the value inside
        the attribute is invalid.

        To create a sumbit button, we use the button element with a type attribute of "submit":

            <button type="submit">Submit</button>

    2. Reset button

        A reset button clears all the data the user has entered into the form and sets
        all the inputs in the form back to default.

        Create one same as above but with type "reset":

            <button type="reset">Reset</button>

    3. Generic button

        This can be used for anything, commonly used in JS for creating interactive UIs.

        use the type attribute "button".

            <button type="button">Click to Toggle</button>

## Organising for elements ##

    Sometimes forms can be too big and be overwhelming for the user.

    To make it easier to take in, you can use some elements to organise forms.

    # Fieldset element #

        This element is a container element that allows grouping related form inputs
        into one logical unit.

        Use the <fieldset> element. Whatever form inputs we want to group together go within
        the opening and closing fieldset tags:

            <fieldset>
                <label for="first_name">First Name</label>
                <input type="text" id="first_name" name="first_name">

                <label for="last_name">Last Name</label>
                <input type="text" id="last_name" name="last_name">
            </fieldset>

    # Legend #

        The <legend> element is used to give fieldsets a heading or caption so the user can
        see what a grouping of inputs is for.

        A legend should always come right after an opening fieldset tag:

            <fieldset>
                <legend>Contact Details</legend>

                <label for="name">Name:</label>
                <input type="text" id="name" name="name">

                <label for="phone_number">Phone Number:</label>
                <input type="tel" id="phone_number" name="phone_number">

                <label for="email">Email:</label>
                <input type="email" id="email" name="email">
            </fieldset>

            <fieldset>
                <legend>Delivery Details</legend>

                <label for="street_address">Street Address:</label>
                <input type="text" id="street_address" name="street_address">

                <label for="city">City:</label>
                <input type="text" id="city" name="city">

                <label for="zip_code">Zip Code:</label>
                <input type="text" id="zip_code" name="zip_code">
            </fieldset>

        A common use-case for these elements is using a fieldset to group radio buttons
        and using a legend to communicate to the user what each of the options is for:

            <fieldset>
                <legend>What would you like to drink?</legend>

                <div>
                    <input type="radio" name="drink" id="coffee" value="coffee">
                    <label for="coffee">Coffee</label>
                </div>

                <div>
                    <input type="radio" name="drink" id="tea" value="tea">
                    <label for="tea">Tea</label>
                </div>

                <div>
                    <input type="radio" name="drink" id="soda" value="soda">
                    <label for="soda">Soda</label>
                </div>
            </fieldset>

## Notes on styling forms ##

    Each browser has its own default styles for form controls, making your forms visually
    different for users depending on the browser.

    You have to override these default styles to make them consistent and style them yourself.

    Styling radio buttons and checkboxes can be difficult but there are some newer CSS
    properties made avaialble to make styling radio buttons and checkboxes easier.

    Some aspects of other elements are impossible to style, like calendar or date pickers. 
    If we want to style these, we will have to build custom form controls with JavaScript
    or use one of the many JavaScript libraries that provide us with ready-made solutions.

