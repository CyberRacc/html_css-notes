## Introduction ##

    SVGs are a very common image format on the web. They can be a little
    confusing at first, but once you know how to use them, they are an incredibly
    powerful tool for creating high-quality, dynamic images for your website.

    In this lesson, we will learn exactly what SVGs are, what they're used for, and how
    you can embed them in your websites.

## Learning Outcomes ##

    
    What SVGs, Vector Graphics, and XML are
    How to create simple SVGs and add them to your websites
    When to use SVGs, and when a different image format would be more appropriate

## What are SVGs? ##

    SVGs are a scalable image format, which means they will easily scale to any size and retain their
    quality without increaing their filesize. They're also very usefil if you need to create
    or modify your images programmatically, because you can change their properties through CSS
    and JavaScript.

    SVGs are often used for:

        Icons

        Graphs/Charts

        Large, simple images

        Patterned backgrounds

        Applying effects to other elements via SVG filters

# Okay, but what are they? #

    SVG stands for Scalable Vector Graphics. Vector graphics are simply images defined by math,
    as opposed to traditional raster graphics, where you image is defined by a grid of pixels.
    With raster graphics, the detail is limited to the size of that pixel grid. If you want
    to increase the size of the image (scale it), you have to increase the size of that grid.
    How do you decide what all those new pixels should look like?
    There's no simply solution. Additionally, the larger the grid, the bigger your filesize
    grows.

    With vector graphics on the other hand, there's no grid. Instead, you have formulas
    for different shapes and lines. Since these are just formulas, it doesn't matter how large
    or small you want them to appear; they can scale to any size you want, and it will have no
    effect on the quality or size of the file.

    SVGs have another intersting apect to them: they're defined using XML. XML (aka,
    "Extensible Markup Language") is a HTML-like syntax which is used for lots of things,
    from APIs, to RSS, to spreadsheet and word editing software.

    The fact that SCG source-code is XML has a few key benefits.

    First, it means that it is human-readable. If you want to open up a JPEG in a text editor,
    it would just look like a gobbledygook. If you were to open up an SVG, however, it would look
    something like this:

        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
            <rect x=0 y=0 width=100 height=50 />
            <circle class="svg-circle" cx="50" cy="50" r="10"/>
        </svg>

    It might still be confusing, but hey, those are words. Tags. Attributes. Compared to binary
    file formats like JPEG, we're definitely in familiar territory.

    The second benefit of XML is that it's designed to be interoperable with HTML, which means
    you can put the above code directly in a HTML file, without any changes, and it should
    display the image. And because these can become elements in the DOM just like HTML elements,
    you can target them with CSS and create them using the Element WebAPI you've already been using.

## Drawbacks ##

    So clearly SVGs are great. Time to go convert all of our images to SVG, right?
    Not quite, SVGs are great for relitavely simply image, but because every single detail of
    the image needs to be written out as XMML, they are extremely inefficient at storing complex
    images. If your image is supposed to be photo-realistic, or it has fine details or texture, like
    grunge textures, then SVGs are the wrong tool for the job.

## Anatomy of an SVG ##

    Typically, you will not want to create SVGs from scratch in your code. Most often, you will
    download the file or copy the code from either a website or from an image editor
    that can create them (Adobe Illustrator and Figma are two popular apps that can create
    SVGs). However, it's pretty common to download an SVG and want to tweak or adjust it a little
    bit, so knowing what all the bits and pieces are, and how they work, is very useful.

        <div class="container">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
            <rect x=0 y=0 width=100 height=100 fill="burlywood"/>
            <path d="M 10 10 H 90 V 90 L 10 60" fill="transparent" stroke="black" stroke-width="3"/>
        <circle cx=50 cy=50 r=20 class="svg-circle"/>
            <g class="svg-text-group">
            <text x="20" y="25" rotate="10" id="hello-text">Hello!</text>
            <use href="#hello-text" x="-10" y="65" fill="white"/>
            </g>
        </svg>
        </div>

    1. xmlns - stands for "XML NameSpace". This specifies what dialect of XML you're using.
    In our case, that dialect is the SVG language spec. Without it, some browsers will not render
    your image or render it incorrectly.

    2. viewBox - defines the bounds of your SVG. When you have to define the positions of different
    points of the elements in your SVG, this is what that's referencing. It also defied the aspect
    ratio and the origin of your SVG. So it's doing quite a lot!

    3. class, id - these attributes function just like they do in HTML. Using these in SVGs allows you to
    easily target an element via CSS or JavaScript, or to reuse an element via the use element.

    4. Elements such as <circle>, <rect>, <path>, and <text> are defined by the SVG namespace.
    These are our basic building-blocks. Although you can make extremely complex images with SVG,
    they are mostly created with just a dozen or so of these basic elements.

    5. Many SVG attributes, such as fill and stroke, acan be changed in your CSS.
    
## Embedding SVGs ##

    There are two main approaches when deciding how to actually place the SVG in your document:
    linked, and inline.

    Linking SVGs works basically the same way as linking any other image. You can use a HTML image
    element such as <img>, or link it in your CSS using background-image: url(./my-image.svg).
    They will still scale properly, but the contents of the SVG will not be accessible from
    the webpage.

    The alternative is to inline your SVGs by pasting their contents directly into
    your webpage's code, rather than linking to it as an image. It will still render
    correctly, but the SVGs properties will be visible to your code which will allow you
    to alter the image dynamically via CSS or JavaScript.

    Inlining SVGs allows you to unlock their full potential, but it also comes with some
    serious drawbacks: it makes your code harder to read, makes your page less cacheable,
    and if it's a large SVG it might delay the rest of your HTML from loading.

    Some of the drawbacks of inlining SVG code can be avoided once you've learned a front-end
    JavaScript library like React, or build-tool like webpack. We aren't quite
    ready to get into those yet, so just keep that in the back of your mind.

    For now, just do whichever works best for your use-case. Linking is generally cleaner
    and simpler, so prefer that unless you need to tweak the SVG code alongside your HTML.
